import {siteUrl} from "@/constants"
import {addComment, loadComments} from "@/firebase/comments"
import sendEmail from "@/nodemailer/sendEmail"
import {getAuth} from "firebase-admin/auth"
import CommentApp from "./CommentApp"

export default function ArticleComments({
  slug,
  title,
}: {
  slug: string
  title: string
}) {
  async function saveComment(formData: FormData) {
    "use server"
    const comment = formData.get("comment")?.toString().trim() ?? ""
    const userId = formData.get("userId")?.toString().trim() ?? ""
    if (!comment || !userId) {
      throw Error(`400: Invalid payload ${{comment, userId}}`)
    }
    const user = await getAuth().getUser(userId)
    if (!user) {
      throw Error(`404: no user found for id "${userId}"`)
    }
    const {displayName, email, photoURL, uid} = user
    await addComment(slug, {
      text: comment,
      user: {displayName, email, photoURL, uid},
    })
    const [commentsRes] = await Promise.allSettled([
      loadComments(slug),
      sendEmail({
        html: `
          <p>${comment}</p>
          <p>${siteUrl}/posts/${slug}</p>
          <p>${email}</p>
          <p>ðŸš¨ðŸš¨ This is an autogenerated email from an unmonitored mailbox, please do not reply ðŸš¨ðŸš¨</p>
        `,
        subject: `${displayName} commented on ${title}`,
      }),
    ])
    if (commentsRes.status === "rejected") {
      throw Error("500: unable to load comments")
    }
    return commentsRes.value
  }
  return <CommentApp {...{saveComment, slug}} />
}
